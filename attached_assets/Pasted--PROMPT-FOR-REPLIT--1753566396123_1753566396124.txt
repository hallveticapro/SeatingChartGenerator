###############################################################################
# PROMPT FOR REPLIT AI: ‚ÄúCLASSROOM SEATING CHART BUILDER‚Äù WEB APP            #
###############################################################################

OBJECTIVE  
Build a browser-based seating-chart generator for teachers.  
Users should be able to lay out desks on a draggable canvas, import a student
list, set seating constraints, and press **Generate** to produce an optimized
chart. The app must be modern, responsive, and visually clean (rounded corners,
soft shadows, high-contrast color palette, system font stack).

-------------------------------------------------------------------------------
TECH STACK  
-------------------------------------------------------------------------------
‚Ä¢ Vanilla HTML5 + CSS3 + JavaScript (ES6 modules) ‚Äî keep dependencies light.  
‚Ä¢ Use **Vite** for instant hot-reload + bundling (already supported on Replit).  
‚Ä¢ Drag-and-drop: [`interact.js`](https://interactjs.io/) (MIT).  
‚Ä¢ PDF export: [`html2canvas`](https://github.com/niklasvh/html2canvas) +
  [`jspdf`](https://github.com/parallax/jsPDF).  
‚Ä¢ Persist layouts in `localStorage` (no backend needed).  

-------------------------------------------------------------------------------
UI/UX REQUIREMENTS  
-------------------------------------------------------------------------------
1. **Layout**  
   ‚Ä¢ Header bar with project title & ‚ÄúSave as PDF‚Äù button.  
   ‚Ä¢ Main area split into:
     ‚Äì **Left panel** (350 px max)  
       ‚Ä£ Student list importer (single text field OR bulk paste, one name/line).  
       ‚Ä£ Constraints builder (see details).  
       ‚Ä£ ‚ÄúGenerate Seating Chart‚Äù primary button.  
     ‚Äì **Right panel** (flex-grow)  
       ‚Ä£ Draggable **Canvas** (`<div id="room-canvas">`):  
           ‚ó¶ Grid background (subtle 20 px squares).  
           ‚ó¶ ‚ÄúAdd Desk‚Äù & ‚ÄúDelete Selected‚Äù buttons pinned top-left of canvas.  
           ‚ó¶ Tool icons to drop common room items: Teacher Desk, Door, Front Label.  
2. **Component style**  
   ‚Ä¢ Rounded corners (border-radius = 8 px).  
   ‚Ä¢ Smooth shadow (`box-shadow: 0 2px 6px rgba(0,0,0,.15)`).  
   ‚Ä¢ Use CSS variables for theme colors:  
     `--primary: #2563eb; --surface: #ffffff; --accent: #fbbf24;` etc.  
   ‚Ä¢ All interactive states (hover, focus, drag) need clear visual feedback.  
3. **Desk shapes**  
   ‚Ä¢ Rectangular desk default (120√ó60 px).  
   ‚Ä¢ Optional toggle to create **Round Table** (diameter = 120 px).  
4. **Accessibility**  
   ‚Ä¢ Keyboard navigation for Add/Delete desk.  
   ‚Ä¢ Focus rings (`outline: 2px solid var(--accent)`) for WCAG 2.1 AA.

-------------------------------------------------------------------------------
FUNCTIONAL REQUIREMENTS  
-------------------------------------------------------------------------------
### Desk Management  
‚Ä¢ `Add Desk` creates a draggable desk element, auto-numbered (1-based).  
‚Ä¢ Deleting a desk re-indexes numbers sequentially.  
‚Ä¢ Editing: double-click a desk to rename/override its number.  
‚Ä¢ Canvas uses `interact.js` for drag, snap-to-grid (20 px).  

### Student List  
‚Ä¢ ‚Äú+ Student‚Äù adds one name.  
‚Ä¢ Bulk import textarea: paste names (newline-separated) ‚Üí parsed into array.  
‚Ä¢ Names stored in array of objects `{ id, name }`. Duplicate names allowed
  but auto-append incrementing suffix (‚ÄúAlex (2)‚Äù).

### Constraints Engine  
Provide UI builders for three constraint types (stored in `constraints[]`):  
1. **Hard Seat** ‚Äì ‚ÄúStudent X must sit at Desk Y.‚Äù  
2. **Keep Apart** ‚Äì ‚ÄúStudent A cannot sit next to Student B.‚Äù  
3. **Distance** ‚Äì ‚ÄúStudent X and Student Y must be at least N desks apart
   (Manhattan grid distance).‚Äù  

### Seating Algorithm  
1. If any hard-seat constraints exist, place those first.  
2. Use backtracking with forward-checking:  
   ‚Ä¢ Fill remaining desks in random order, skipping placements that break
     constraints.  
   ‚Ä¢ Abort at 50 000 iterations ‚Üí declare layout impossible and explain why.  
3. On success: render student names inside desk elements; color-code seats that
   satisfy special rules.  

### Export  
‚Ä¢ ‚ÄúSave as PDF‚Äù triggers html2canvas ‚Üí jsPDF ‚Üí download `seating-chart.pdf`.
  Warn user if canvas width > A4/Letter limits ‚Äî suggest landscape orientation.

-------------------------------------------------------------------------------
EDGE CASES TO HANDLE  
-------------------------------------------------------------------------------
1. ü™ë **Too Many Students** ‚Äì > desks; prompt to add desks or remove students.  
2. üßë‚Äçüè´ **Too Few Students** ‚Äì < desks; allow blanks but keep numbering.  
3. üîÅ **Duplicate Student Names** ‚Äì auto-suffix or prompt rename.  
4. üîó **Impossible Constraints** ‚Äì circular dependencies, seat already locked,
   distance larger than room; algorithm must detect and display toast error
   listing offending rules.  
5. üóëÔ∏è **Desk Deleted After Placement** ‚Äì re-validate existing seating, mark
   un-seated students, allow ‚ÄúRegenerate‚Äù to fix.  
6. üìÑ **Empty Canvas on Export** ‚Äì disable PDF button if no desks.  
7. üñ•Ô∏è **Extreme Zoom / Tiny Screens** ‚Äì responsive scaling of the canvas,
   horizontal scroll allowed but keep controls accessible.  
8. üè∑Ô∏è **Name Overflow** ‚Äì if student name width > desk width, shrink font or
   ellipsis plus full name tooltip.  
9. üîÑ **Undo/Redo** ‚Äì optional bonus: maintain stack of layout states.  

-------------------------------------------------------------------------------
DEV NOTES & NON-FUNCTIONAL  
-------------------------------------------------------------------------------
‚Ä¢ Use ES classes or functional modules (`Room`, `Desk`, `Student`, `Engine`).  
‚Ä¢ Type JSDoc comments for all public functions.  
‚Ä¢ Keep code readable: single-purpose files in `/src`.  
‚Ä¢ Ship a minimal `README.md` with install/run instructions.  
‚Ä¢ Provide a 30-second GIF demo in `/docs/demo.gif` (nice-to-have).  

###############################################################################
# END OF PROMPT                                                              #
###############################################################################
